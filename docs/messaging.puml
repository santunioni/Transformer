@startuml
'https://plantuml.com/class-diagram
skinparam groupInheritance 3

interface AIOProducer {
    + async send(response: ServiceResponse) -> ProducerMetadata
}
interface AIOConsumer {
    + async __aiter__() -> EntrypointMetadata
}
class AIOKafkaConsumerAdapter {
    + async __aiter__() -> ConsumerRecord
}
AIOKafkaConsumerAdapter .u.|> AIOConsumer

abstract class ApplicationBridge {
    + application: Application
    + {abstract} extract_data(input: EntrypointMetadata)
}
ApplicationBridge o.l. Application

abstract class ServerlessApplicationBridge {
    + async entrypoint(input: str | bytes)
    + {abstract} extract_data(input: EntrypointMetadata)
}
ServerlessApplicationBridge -u-|> ApplicationBridge

class LambdaApplicationBridge {
    + extract_data(input: AWSLambdaMetadata)
}
LambdaApplicationBridge -u-|> ServerlessApplicationBridge


abstract class ConsumerApplicationBridge {
    + aio_consumer: AIOConsumer
    + async consume()
    + {abstract} extract_data(input: EntrypointMetadata)
}
ConsumerApplicationBridge -u-|> ApplicationBridge
AIOConsumer <.l. ConsumerApplicationBridge

class KafkaConsumerBridgeToApplication {
    + extract_data(input: ConsumerRecord)
}
KafkaConsumerBridgeToApplication -u-|> ConsumerApplicationBridge

class Application {
    - letters: Queue[ServiceLetter]
    - aio_producer: AIOProducer
    + async ingest_data(raw_data)
}
Application .l.> AIOProducer
@enduml
